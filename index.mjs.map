{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-base-max-by';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a one-dimensional ndarray via a callback function.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {number} maximum value\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = maxBy( [ x ], clbk );\n* // returns 8.0\n*/\nfunction maxBy( arrays, clbk, thisArg ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), wrapper, null ); // eslint-disable-line max-len\n\n\t/**\n\t* Invokes a provided callback.\n\t*\n\t* @private\n\t* @param {*} value - current array element\n\t* @param {NonNegativeInteger} aidx - current array element index\n\t* @param {NonNegativeInteger} sidx - current strided array element index\n\t* @param {Collection} arr - input array\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( value, aidx ) {\n\t\treturn clbk.call( thisArg, value, aidx, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default maxBy;\n"],"names":["maxBy","arrays","clbk","thisArg","x","strided","numelDimension","getData","getStride","getOffset","value","aidx","call"],"mappings":";;6eAoDA,SAASA,EAAOC,EAAQC,EAAMC,GAC7B,IAAIC,EAAIH,EAAQ,GAChB,OAAOI,EAASC,EAAgBF,EAAG,GAAKG,EAASH,GAAKI,EAAWJ,EAAG,GAAKK,EAAWL,IAYpF,SAAkBM,EAAOC,GACxB,OAAOT,EAAKU,KAAMT,EAASO,EAAOC,EAAMP,EACxC,GAdiG,KAenG"}